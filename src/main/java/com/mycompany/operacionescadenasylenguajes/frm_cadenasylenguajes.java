/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.operacionescadenasylenguajes;

import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;

/**
 *
 * @author user
 */
public class frm_cadenasylenguajes extends javax.swing.JFrame {

    /**
     * Creates new form frm_cadenasylenguajes
     */
    public frm_cadenasylenguajes() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        Cadenas = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt_cadena_izq = new javax.swing.JTextField();
        btn_procesar = new javax.swing.JButton();
        lbl_longitud_izq = new javax.swing.JLabel();
        n_longitud_izq = new javax.swing.JLabel();
        lbl_cadenainvertida_izq = new javax.swing.JLabel();
        n_cadena_invertida_izq = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txt_cadena_der = new javax.swing.JTextField();
        lbl_longitud_der = new javax.swing.JLabel();
        n_longitud_der = new javax.swing.JLabel();
        lbl_cadenainvertida_der = new javax.swing.JLabel();
        n_cadena_invertida_der = new javax.swing.JLabel();
        lbl_concatenacion = new javax.swing.JLabel();
        n_concatenacion = new javax.swing.JLabel();
        btn_concatenar = new javax.swing.JButton();
        txt_potencia_izq = new javax.swing.JTextField();
        btn_potencia_izq = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        n_potencia_izq = new javax.swing.JLabel();
        txt_potencia_der = new javax.swing.JTextField();
        btn_potencia_der = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        n_potencia_der = new javax.swing.JLabel();
        Lenguajes = new javax.swing.JPanel();
        txt_lenguaje1 = new javax.swing.JTextField();
        txt_lenguaje2 = new javax.swing.JTextField();
        btn_union = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        txt_resultado_lenguajes = new javax.swing.JTextArea();
        btn_interseccion = new javax.swing.JButton();
        btn_diferencia = new javax.swing.JButton();
        btn_concatenacion = new javax.swing.JButton();
        btn_potencia_l1 = new javax.swing.JButton();
        txt_potencia_l1 = new javax.swing.JTextField();
        btn_inversa_l1 = new javax.swing.JButton();
        txt_kleene_l1 = new javax.swing.JTextField();
        btn_kleene_l1 = new javax.swing.JButton();
        txt_positiva_l1 = new javax.swing.JTextField();
        btn_positiva_l1 = new javax.swing.JButton();
        lenguaje1apertura = new javax.swing.JLabel();
        lenguaje1cierre = new javax.swing.JLabel();
        lenguaje2apertura = new javax.swing.JLabel();
        lenguaje2cierre = new javax.swing.JLabel();
        txt_nueva_palabra = new javax.swing.JTextField();
        btn_agregar = new javax.swing.JButton();
        btn_eliminar = new javax.swing.JButton();
        btn_mostrar = new javax.swing.JButton();
        AFD = new javax.swing.JPanel();
        txt_simulador_afd = new javax.swing.JTextField();
        btn_simular_afd = new javax.swing.JToggleButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        txt_resultado_afd = new javax.swing.JTextArea();
        AFND = new javax.swing.JPanel();
        txt_simulador_afd2 = new javax.swing.JTextField();
        btn_simular_afd2 = new javax.swing.JToggleButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        txt_resultado_afd2 = new javax.swing.JTextArea();

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.setBackground(new java.awt.Color(0, 0, 0));
        jTabbedPane1.setForeground(new java.awt.Color(255, 255, 255));

        Cadenas.setBackground(new java.awt.Color(0, 0, 0));

        txt_cadena_izq.setBackground(new java.awt.Color(51, 51, 51));
        txt_cadena_izq.setForeground(new java.awt.Color(204, 204, 180));
        txt_cadena_izq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_cadena_izqActionPerformed(evt);
            }
        });
        jScrollPane1.setViewportView(txt_cadena_izq);

        btn_procesar.setBackground(new java.awt.Color(102, 102, 102));
        btn_procesar.setForeground(new java.awt.Color(255, 255, 255));
        btn_procesar.setText("Procesar");
        btn_procesar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_procesarActionPerformed(evt);
            }
        });

        lbl_longitud_izq.setForeground(new java.awt.Color(255, 255, 255));
        lbl_longitud_izq.setText("Longitud:");

        n_longitud_izq.setForeground(new java.awt.Color(255, 255, 255));

        lbl_cadenainvertida_izq.setForeground(new java.awt.Color(255, 255, 255));
        lbl_cadenainvertida_izq.setText("Cadenas Invertida:");

        n_cadena_invertida_izq.setForeground(new java.awt.Color(255, 255, 255));

        txt_cadena_der.setBackground(new java.awt.Color(51, 51, 51));
        txt_cadena_der.setForeground(new java.awt.Color(204, 204, 180));
        txt_cadena_der.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_cadena_derActionPerformed(evt);
            }
        });
        jScrollPane2.setViewportView(txt_cadena_der);

        lbl_longitud_der.setForeground(new java.awt.Color(255, 255, 255));
        lbl_longitud_der.setText("Longitud:");

        n_longitud_der.setForeground(new java.awt.Color(255, 255, 255));

        lbl_cadenainvertida_der.setForeground(new java.awt.Color(255, 255, 255));
        lbl_cadenainvertida_der.setText("Cadenas Invertida:");

        n_cadena_invertida_der.setForeground(new java.awt.Color(255, 255, 255));

        lbl_concatenacion.setForeground(new java.awt.Color(255, 255, 255));
        lbl_concatenacion.setText("Concatenaci√≥n:");

        n_concatenacion.setForeground(new java.awt.Color(255, 255, 255));

        btn_concatenar.setBackground(new java.awt.Color(102, 102, 102));
        btn_concatenar.setForeground(new java.awt.Color(255, 255, 255));
        btn_concatenar.setText("Concatenar cadenas");
        btn_concatenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_concatenarActionPerformed(evt);
            }
        });

        txt_potencia_izq.setBackground(new java.awt.Color(51, 51, 51));
        txt_potencia_izq.setForeground(new java.awt.Color(255, 255, 255));

        btn_potencia_izq.setBackground(new java.awt.Color(102, 102, 102));
        btn_potencia_izq.setForeground(new java.awt.Color(255, 255, 255));
        btn_potencia_izq.setText("Potencia cadena izq");
        btn_potencia_izq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_potencia_izqActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(n_potencia_izq);

        txt_potencia_der.setBackground(new java.awt.Color(51, 51, 51));
        txt_potencia_der.setForeground(new java.awt.Color(255, 255, 255));

        btn_potencia_der.setBackground(new java.awt.Color(102, 102, 102));
        btn_potencia_der.setForeground(new java.awt.Color(255, 255, 255));
        btn_potencia_der.setText("Potencia cadena der");
        btn_potencia_der.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_potencia_derActionPerformed(evt);
            }
        });

        jScrollPane4.setViewportView(n_potencia_der);

        javax.swing.GroupLayout CadenasLayout = new javax.swing.GroupLayout(Cadenas);
        Cadenas.setLayout(CadenasLayout);
        CadenasLayout.setHorizontalGroup(
            CadenasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CadenasLayout.createSequentialGroup()
                .addGroup(CadenasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CadenasLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(txt_potencia_izq, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_potencia_izq)
                        .addGap(18, 18, 18)
                        .addComponent(txt_potencia_der, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_potencia_der))
                    .addGroup(CadenasLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(CadenasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(CadenasLayout.createSequentialGroup()
                                .addComponent(lbl_concatenacion)
                                .addGap(18, 18, 18)
                                .addComponent(n_concatenacion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(CadenasLayout.createSequentialGroup()
                                .addGroup(CadenasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btn_concatenar)
                                    .addGroup(CadenasLayout.createSequentialGroup()
                                        .addGroup(CadenasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(CadenasLayout.createSequentialGroup()
                                                .addComponent(lbl_longitud_izq)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(n_longitud_izq))
                                            .addGroup(CadenasLayout.createSequentialGroup()
                                                .addComponent(lbl_cadenainvertida_izq)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(n_cadena_invertida_izq, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(18, 18, 18)
                                        .addGroup(CadenasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(CadenasLayout.createSequentialGroup()
                                                .addComponent(lbl_longitud_der)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(n_longitud_der))
                                            .addGroup(CadenasLayout.createSequentialGroup()
                                                .addComponent(lbl_cadenainvertida_der)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(n_cadena_invertida_der, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(CadenasLayout.createSequentialGroup()
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(CadenasLayout.createSequentialGroup()
                        .addGap(201, 201, 201)
                        .addComponent(btn_procesar))
                    .addGroup(CadenasLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        CadenasLayout.setVerticalGroup(
            CadenasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CadenasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CadenasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CadenasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_potencia_izq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_potencia_izq)
                    .addComponent(txt_potencia_der, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_potencia_der))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_procesar)
                .addGap(5, 5, 5)
                .addGroup(CadenasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CadenasLayout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(CadenasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_concatenacion)
                            .addComponent(n_concatenacion, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_concatenar))
                    .addGroup(CadenasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(CadenasLayout.createSequentialGroup()
                            .addGroup(CadenasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lbl_longitud_der)
                                .addComponent(n_longitud_der, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(CadenasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lbl_cadenainvertida_der)
                                .addComponent(n_cadena_invertida_der, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(CadenasLayout.createSequentialGroup()
                            .addGroup(CadenasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lbl_longitud_izq)
                                .addComponent(n_longitud_izq, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(CadenasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lbl_cadenainvertida_izq)
                                .addComponent(n_cadena_invertida_izq, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CadenasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(158, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Cadenas", Cadenas);

        Lenguajes.setBackground(new java.awt.Color(0, 0, 0));

        txt_lenguaje1.setBackground(new java.awt.Color(51, 51, 51));
        txt_lenguaje1.setForeground(new java.awt.Color(255, 255, 255));
        txt_lenguaje1.setFocusCycleRoot(true);

        txt_lenguaje2.setBackground(new java.awt.Color(51, 51, 51));
        txt_lenguaje2.setForeground(new java.awt.Color(255, 255, 255));

        btn_union.setBackground(new java.awt.Color(102, 102, 102));
        btn_union.setForeground(new java.awt.Color(255, 255, 255));
        btn_union.setText("L‚ÇÅ‚à™L‚ÇÇ");
        btn_union.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_unionActionPerformed(evt);
            }
        });

        txt_resultado_lenguajes.setEditable(false);
        txt_resultado_lenguajes.setBackground(new java.awt.Color(51, 51, 51));
        txt_resultado_lenguajes.setColumns(20);
        txt_resultado_lenguajes.setForeground(new java.awt.Color(255, 255, 255));
        txt_resultado_lenguajes.setLineWrap(true);
        txt_resultado_lenguajes.setRows(5);
        jScrollPane6.setViewportView(txt_resultado_lenguajes);

        btn_interseccion.setBackground(new java.awt.Color(102, 102, 102));
        btn_interseccion.setForeground(new java.awt.Color(255, 255, 255));
        btn_interseccion.setText("L‚ÇÅ‚à©L‚ÇÇ");
        btn_interseccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_interseccionActionPerformed(evt);
            }
        });

        btn_diferencia.setBackground(new java.awt.Color(102, 102, 102));
        btn_diferencia.setForeground(new java.awt.Color(255, 255, 255));
        btn_diferencia.setText("L‚ÇÅ-L‚ÇÇ");
        btn_diferencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_diferenciaActionPerformed(evt);
            }
        });

        btn_concatenacion.setBackground(new java.awt.Color(102, 102, 102));
        btn_concatenacion.setForeground(new java.awt.Color(255, 255, 255));
        btn_concatenacion.setText("L‚ÇÅ¬∑L‚ÇÇ");
        btn_concatenacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_concatenacionActionPerformed(evt);
            }
        });

        btn_potencia_l1.setBackground(new java.awt.Color(102, 102, 102));
        btn_potencia_l1.setForeground(new java.awt.Color(255, 255, 255));
        btn_potencia_l1.setText("L‚ÇÅ‚Åø");
        btn_potencia_l1.setFocusCycleRoot(true);
        btn_potencia_l1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_potencia_l1ActionPerformed(evt);
            }
        });

        txt_potencia_l1.setBackground(new java.awt.Color(51, 51, 51));
        txt_potencia_l1.setForeground(new java.awt.Color(255, 255, 255));

        btn_inversa_l1.setBackground(new java.awt.Color(102, 102, 102));
        btn_inversa_l1.setForeground(new java.awt.Color(255, 255, 255));
        btn_inversa_l1.setText("L‚ÇÅ'");
        btn_inversa_l1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_inversa_l1ActionPerformed(evt);
            }
        });

        txt_kleene_l1.setBackground(new java.awt.Color(51, 51, 51));
        txt_kleene_l1.setForeground(new java.awt.Color(255, 255, 255));

        btn_kleene_l1.setBackground(new java.awt.Color(102, 102, 102));
        btn_kleene_l1.setForeground(new java.awt.Color(255, 255, 255));
        btn_kleene_l1.setText("Cerradura de Kleene");
        btn_kleene_l1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_kleene_l1ActionPerformed(evt);
            }
        });

        txt_positiva_l1.setBackground(new java.awt.Color(51, 51, 51));
        txt_positiva_l1.setForeground(new java.awt.Color(255, 255, 255));

        btn_positiva_l1.setBackground(new java.awt.Color(102, 102, 102));
        btn_positiva_l1.setForeground(new java.awt.Color(255, 255, 255));
        btn_positiva_l1.setText("Cerradura Positiva de Kleene");
        btn_positiva_l1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_positiva_l1ActionPerformed(evt);
            }
        });

        lenguaje1apertura.setForeground(new java.awt.Color(255, 255, 255));
        lenguaje1apertura.setText("L‚ÇÅ = {");

        lenguaje1cierre.setForeground(new java.awt.Color(255, 255, 255));
        lenguaje1cierre.setText("}");

        lenguaje2apertura.setForeground(new java.awt.Color(255, 255, 255));
        lenguaje2apertura.setText("L‚ÇÇ = {");

        lenguaje2cierre.setForeground(new java.awt.Color(255, 255, 255));
        lenguaje2cierre.setText("}");

        txt_nueva_palabra.setBackground(new java.awt.Color(51, 51, 51));
        txt_nueva_palabra.setForeground(new java.awt.Color(255, 255, 255));
        txt_nueva_palabra.setToolTipText("Palabra a agregar/eliminar");

        btn_agregar.setBackground(new java.awt.Color(102, 102, 102));
        btn_agregar.setForeground(new java.awt.Color(255, 255, 255));
        btn_agregar.setText("Agregar");
        btn_agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_agregarActionPerformed(evt);
            }
        });

        btn_eliminar.setBackground(new java.awt.Color(102, 102, 102));
        btn_eliminar.setForeground(new java.awt.Color(255, 255, 255));
        btn_eliminar.setText("Eliminar");
        btn_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_eliminarActionPerformed(evt);
            }
        });

        btn_mostrar.setBackground(new java.awt.Color(102, 102, 102));
        btn_mostrar.setForeground(new java.awt.Color(255, 255, 255));
        btn_mostrar.setText("Mostrar");
        btn_mostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_mostrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout LenguajesLayout = new javax.swing.GroupLayout(Lenguajes);
        Lenguajes.setLayout(LenguajesLayout);
        LenguajesLayout.setHorizontalGroup(
            LenguajesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LenguajesLayout.createSequentialGroup()
                .addGroup(LenguajesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(LenguajesLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(LenguajesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane6)
                            .addGroup(LenguajesLayout.createSequentialGroup()
                                .addGroup(LenguajesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(LenguajesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(LenguajesLayout.createSequentialGroup()
                                            .addComponent(btn_union)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(btn_interseccion)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(btn_diferencia)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(btn_concatenacion))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, LenguajesLayout.createSequentialGroup()
                                            .addComponent(txt_potencia_l1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(btn_potencia_l1)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(btn_inversa_l1)))
                                    .addGroup(LenguajesLayout.createSequentialGroup()
                                        .addComponent(txt_kleene_l1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btn_kleene_l1))
                                    .addGroup(LenguajesLayout.createSequentialGroup()
                                        .addComponent(txt_positiva_l1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btn_positiva_l1)))
                                .addGap(0, 173, Short.MAX_VALUE))))
                    .addGroup(LenguajesLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(LenguajesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(LenguajesLayout.createSequentialGroup()
                                .addComponent(lenguaje1apertura)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_lenguaje1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lenguaje1cierre, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(49, 49, 49)
                                .addComponent(lenguaje2apertura)
                                .addGap(5, 5, 5)
                                .addComponent(txt_lenguaje2, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lenguaje2cierre))
                            .addGroup(LenguajesLayout.createSequentialGroup()
                                .addGroup(LenguajesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txt_nueva_palabra)
                                    .addComponent(btn_mostrar, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(LenguajesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btn_agregar)
                                    .addComponent(btn_eliminar))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        LenguajesLayout.setVerticalGroup(
            LenguajesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LenguajesLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(LenguajesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_lenguaje1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lenguaje1cierre, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lenguaje1apertura, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lenguaje2cierre, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lenguaje2apertura, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_lenguaje2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(LenguajesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_nueva_palabra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_agregar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(LenguajesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_eliminar)
                    .addComponent(btn_mostrar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(LenguajesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_potencia_l1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_potencia_l1)
                    .addComponent(btn_inversa_l1))
                .addGap(5, 5, 5)
                .addGroup(LenguajesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_kleene_l1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_kleene_l1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(LenguajesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_positiva_l1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_positiva_l1))
                .addGap(2, 2, 2)
                .addGroup(LenguajesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_union)
                    .addComponent(btn_interseccion)
                    .addComponent(btn_diferencia)
                    .addComponent(btn_concatenacion))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );

        jTabbedPane1.addTab("Lenguajes", Lenguajes);

        AFD.setBackground(new java.awt.Color(0, 0, 0));
        AFD.setForeground(new java.awt.Color(255, 255, 255));

        txt_simulador_afd.setBackground(new java.awt.Color(51, 51, 51));
        txt_simulador_afd.setForeground(new java.awt.Color(255, 255, 255));
        txt_simulador_afd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_simulador_afdActionPerformed(evt);
            }
        });

        btn_simular_afd.setBackground(new java.awt.Color(102, 102, 102));
        btn_simular_afd.setForeground(new java.awt.Color(255, 255, 255));
        btn_simular_afd.setText("Procesar");
        btn_simular_afd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_simular_afdActionPerformed(evt);
            }
        });

        jScrollPane5.setToolTipText("");
        jScrollPane5.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane5.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        txt_resultado_afd.setEditable(false);
        txt_resultado_afd.setBackground(new java.awt.Color(51, 51, 51));
        txt_resultado_afd.setColumns(20);
        txt_resultado_afd.setForeground(new java.awt.Color(255, 255, 255));
        txt_resultado_afd.setLineWrap(true);
        txt_resultado_afd.setRows(5);
        jScrollPane5.setViewportView(txt_resultado_afd);

        javax.swing.GroupLayout AFDLayout = new javax.swing.GroupLayout(AFD);
        AFD.setLayout(AFDLayout);
        AFDLayout.setHorizontalGroup(
            AFDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AFDLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(AFDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AFDLayout.createSequentialGroup()
                        .addGap(0, 416, Short.MAX_VALUE)
                        .addComponent(btn_simular_afd))
                    .addComponent(txt_simulador_afd, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        AFDLayout.setVerticalGroup(
            AFDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AFDLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(txt_simulador_afd, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_simular_afd)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(108, Short.MAX_VALUE))
        );

        jScrollPane5.getAccessibleContext().setAccessibleName("");

        jTabbedPane1.addTab("AFD1", AFD);

        AFND.setBackground(new java.awt.Color(0, 0, 0));

        txt_simulador_afd2.setBackground(new java.awt.Color(51, 51, 51));
        txt_simulador_afd2.setForeground(new java.awt.Color(255, 255, 255));

        btn_simular_afd2.setBackground(new java.awt.Color(102, 102, 102));
        btn_simular_afd2.setForeground(new java.awt.Color(255, 255, 255));
        btn_simular_afd2.setText("Procesar");
        btn_simular_afd2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_simular_afd2ActionPerformed(evt);
            }
        });

        txt_resultado_afd2.setBackground(new java.awt.Color(51, 51, 51));
        txt_resultado_afd2.setColumns(20);
        txt_resultado_afd2.setForeground(new java.awt.Color(255, 255, 255));
        txt_resultado_afd2.setRows(5);
        jScrollPane7.setViewportView(txt_resultado_afd2);

        javax.swing.GroupLayout AFNDLayout = new javax.swing.GroupLayout(AFND);
        AFND.setLayout(AFNDLayout);
        AFNDLayout.setHorizontalGroup(
            AFNDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AFNDLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(AFNDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btn_simular_afd2)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE)
                    .addComponent(txt_simulador_afd2, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        AFNDLayout.setVerticalGroup(
            AFNDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AFNDLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(txt_simulador_afd2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(btn_simular_afd2)
                .addGap(26, 26, 26)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(92, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("AFD2", AFND);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txt_cadena_izqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_cadena_izqActionPerformed
        // TODO add your handling code here:
        //txt_cadenas
    }//GEN-LAST:event_txt_cadena_izqActionPerformed

    private void btn_procesarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_procesarActionPerformed
        // TODO add your handling code here:

        // =======================
        // LADO IZQUIERDO
        // =======================
        String cadenaIzq = this.txt_cadena_izq.getText();
        String cadenaIzqSinEspacios = cadenaIzq.trim();

        // Longitud izquierda
        int longitudIzq = cadenaIzqSinEspacios.length();
        this.n_longitud_izq.setText(String.valueOf(longitudIzq));

        // Inversi√≥n izquierda
        String cadenaInvertidaIzq = new StringBuilder(cadenaIzqSinEspacios).reverse().toString();
        if (cadenaInvertidaIzq.isEmpty()) {
            this.n_cadena_invertida_izq.setText("Œª");
        } else {
            this.n_cadena_invertida_izq.setText(cadenaInvertidaIzq);
        }

        // =======================
        // LADO DERECHO
        // =======================
        String cadenaDer = this.txt_cadena_der.getText();
        String cadenaDerSinEspacios = cadenaDer.trim();

        // Longitud derecha
        int longitudDer = cadenaDerSinEspacios.length();
        this.n_longitud_der.setText(String.valueOf(longitudDer));

        // Inversi√≥n derecha
        String cadenaInvertidaDer = new StringBuilder(cadenaDerSinEspacios).reverse().toString();
        if (cadenaInvertidaDer.isEmpty()) {
            this.n_cadena_invertida_der.setText("Œª");
        } else {
            this.n_cadena_invertida_der.setText(cadenaInvertidaDer);
        }

    }//GEN-LAST:event_btn_procesarActionPerformed

    private void txt_cadena_derActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_cadena_derActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_cadena_derActionPerformed

    private void btn_concatenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_concatenarActionPerformed
        // TODO add your handling code here:

        // Obtener y limpiar cadenas
        String cadenaIzq = this.txt_cadena_izq.getText().trim();
        String cadenaDer = this.txt_cadena_der.getText().trim();

        // Para mostrar con Œª si est√°n vac√≠as
        String mostrarIzq = cadenaIzq.isEmpty() ? "Œª" : cadenaIzq;
        String mostrarDer = cadenaDer.isEmpty() ? "Œª" : cadenaDer;

        // Concatenar
        String resultado = cadenaIzq + cadenaDer;
        String mostrarResultado = resultado.isEmpty() ? "Œª" : resultado;

        // Mostrar resultado formal
        String mensaje = mostrarIzq + " ‚ãÖ " + mostrarDer + " = " + mostrarResultado;
        this.n_concatenacion.setText(mensaje);

    }//GEN-LAST:event_btn_concatenarActionPerformed

    private void btn_potencia_izqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_potencia_izqActionPerformed
        // TODO add your handling code here:

        String cadena = this.txt_cadena_izq.getText().trim();
        String nStr = this.txt_potencia_izq.getText().trim();

        if (cadena == null || nStr == null || nStr.isEmpty()) {
            this.n_potencia_izq.setText("Ingrese una cadena y un n√∫mero.");
            return;
        }

        try {
            int n = Integer.parseInt(nStr);
            StringBuilder resultado = new StringBuilder();

            if (n == 0) {
                resultado.append("Œª");
            } else {
                for (int i = 0; i < n; i++) {
                    resultado.append(cadena);
                }
            }

            this.n_potencia_izq.setText(resultado.toString());

        } catch (NumberFormatException ex) {
            this.n_potencia_izq.setText("Debe ingresar un n√∫mero entero.");
        }

    }//GEN-LAST:event_btn_potencia_izqActionPerformed

    private void btn_potencia_derActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_potencia_derActionPerformed
        // TODO add your handling code here:

        String cadena = this.txt_cadena_der.getText().trim();
        String nStr = this.txt_potencia_der.getText().trim();

        if (cadena == null || nStr == null || nStr.isEmpty()) {
            this.n_potencia_der.setText("Ingrese una cadena y un n√∫mero.");
            return;
        }

        try {
            int n = Integer.parseInt(nStr);
            StringBuilder resultado = new StringBuilder();

            if (n == 0) {
                resultado.append("Œª");
            } else {
                for (int i = 0; i < n; i++) {
                    resultado.append(cadena);
                }
            }

            this.n_potencia_der.setText(resultado.toString());

        } catch (NumberFormatException ex) {
            this.n_potencia_der.setText("Debe ingresar un n√∫mero entero.");
        }

    }//GEN-LAST:event_btn_potencia_derActionPerformed

    private void txt_simulador_afdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_simulador_afdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_simulador_afdActionPerformed

    private void btn_simular_afdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_simular_afdActionPerformed
        // TODO add your handling code here:
        String cadena = this.txt_simulador_afd.getText().trim();
        String estado = "q0";
        StringBuilder recorrido = new StringBuilder();

        recorrido.append("Simulaci√≥n del AFD para cadena: ").append(cadena).append("\n\n");

        for (int i = 0; i < cadena.length(); i++) {
            char simbolo = cadena.charAt(i);

            recorrido.append("S√≠mbolo le√≠do: ").append(simbolo).append("\n");

            switch (estado) {
                case "q0":
                    if (simbolo == '0') {
                        estado = "q0";
                        recorrido.append("Estado q0 ‚Üí q0\n");
                    } else if (simbolo == '1') {
                        estado = "q1";
                        recorrido.append("Estado q0 ‚Üí q1\n");
                    } else {
                        recorrido.append("S√≠mbolo inv√°lido (solo 0 y 1)\n");
                        this.txt_resultado_afd.setText("Error: s√≠mbolo no v√°lido.");
                        return;
                    }
                    break;

                case "q1":
                    if (simbolo == '0') {
                        estado = "q2";
                        recorrido.append("Estado q1 ‚Üí q2\n");
                    } else if (simbolo == '1') {
                        estado = "q0";
                        recorrido.append("Estado q1 ‚Üí q0\n");
                    } else {
                        recorrido.append("S√≠mbolo inv√°lido\n");
                        this.txt_resultado_afd.setText("Error: s√≠mbolo no v√°lido.");
                        return;
                    }
                    break;

                case "q2":
                    if (simbolo == '0') {
                        estado = "q1";
                        recorrido.append("Estado q2 ‚Üí q1\n");
                    } else if (simbolo == '1') {
                        estado = "q2";
                        recorrido.append("Estado q2 ‚Üí q2\n");
                    } else {
                        recorrido.append("S√≠mbolo inv√°lido\n");
                        this.txt_resultado_afd.setText("Error: s√≠mbolo no v√°lido.");
                        return;
                    }
                    break;
            }
            recorrido.append("-------------------------------------\n");
        }

        
        recorrido.append("\nEstado final: ").append(estado).append("\n");
        if (estado.equals("q2")) {
            recorrido.append("‚úÖ La cadena es ACEPTADA (estado final q2)");
        } else {
            recorrido.append("‚ùå La cadena es RECHAZADA (no termina en q2)");
        }

        this.txt_resultado_afd.setText(recorrido.toString());

    }//GEN-LAST:event_btn_simular_afdActionPerformed

    private void btn_unionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_unionActionPerformed
        // TODO add your handling code here:
        String l1Texto = this.txt_lenguaje1.getText().trim();
        String l2Texto = this.txt_lenguaje2.getText().trim();

        String[] l1Array = l1Texto.split(",");
        String[] l2Array = l2Texto.split(",");

        Set<String> union = new LinkedHashSet<>();

        for (String elem : l1Array) {
            if (!elem.trim().isEmpty()) {
                union.add(elem.trim());
            }
        }

        for (String elem : l2Array) {
            if (!elem.trim().isEmpty()) {
                union.add(elem.trim());
            }
        }

        StringBuilder resultado = new StringBuilder("L1 ‚à™ L2 = { ");
        for (String palabra : union) {
            resultado.append(palabra).append(", ");
        }

        if (!union.isEmpty()) {
            resultado.setLength(resultado.length() - 2);
        }
        resultado.append(" }");

        this.txt_resultado_lenguajes.setText(resultado.toString());

    }//GEN-LAST:event_btn_unionActionPerformed

    private void btn_interseccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_interseccionActionPerformed
        // TODO add your handling code here:

        String l1Texto = this.txt_lenguaje1.getText().trim();
        String l2Texto = this.txt_lenguaje2.getText().trim();

        String[] l1Array = l1Texto.split(",");
        String[] l2Array = l2Texto.split(",");

        Set<String> conjuntoL1 = new LinkedHashSet<>();
        Set<String> conjuntoL2 = new LinkedHashSet<>();
        Set<String> interseccion = new LinkedHashSet<>();

        // Rellenar conjuntos eliminando espacios vac√≠os
        for (String elem : l1Array) {
            if (!elem.trim().isEmpty()) {
                conjuntoL1.add(elem.trim());
            }
        }
        for (String elem : l2Array) {
            if (!elem.trim().isEmpty()) {
                conjuntoL2.add(elem.trim());
            }
        }

        // Calcular intersecci√≥n
        for (String palabra : conjuntoL1) {
            if (conjuntoL2.contains(palabra)) {
                interseccion.add(palabra);
            }
        }

        // Mostrar resultado
        StringBuilder resultado = new StringBuilder("L1 ‚à© L2 = { ");
        for (String palabra : interseccion) {
            resultado.append(palabra).append(", ");
        }
        if (!interseccion.isEmpty()) {
            resultado.setLength(resultado.length() - 2); // quitar coma final
        }
        resultado.append(" }");

        this.txt_resultado_lenguajes.setText(resultado.toString());

    }//GEN-LAST:event_btn_interseccionActionPerformed

    private void btn_diferenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_diferenciaActionPerformed
        // TODO add your handling code here:
        String l1Texto = this.txt_lenguaje1.getText().trim();
        String l2Texto = this.txt_lenguaje2.getText().trim();

        String[] l1Array = l1Texto.split(",");
        String[] l2Array = l2Texto.split(",");

        Set<String> conjuntoL1 = new LinkedHashSet<>();
        Set<String> conjuntoL2 = new LinkedHashSet<>();
        Set<String> diferencia = new LinkedHashSet<>();

        for (String elem : l1Array) {
            if (!elem.trim().isEmpty()) {
                conjuntoL1.add(elem.trim());
            }
        }
        for (String elem : l2Array) {
            if (!elem.trim().isEmpty()) {
                conjuntoL2.add(elem.trim());
            }
        }

        for (String palabra : conjuntoL1) {
            if (!conjuntoL2.contains(palabra)) {
                diferencia.add(palabra);
            }
        }

        StringBuilder resultado = new StringBuilder("L1 - L2 = { ");
        for (String palabra : diferencia) {
            resultado.append(palabra).append(", ");
        }
        if (!diferencia.isEmpty()) {
            resultado.setLength(resultado.length() - 2); // quitar coma final
        }
        resultado.append(" }");

        this.txt_resultado_lenguajes.setText(resultado.toString());

    }//GEN-LAST:event_btn_diferenciaActionPerformed

    private void btn_concatenacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_concatenacionActionPerformed
        // TODO add your handling code here:
        String l1Texto = this.txt_lenguaje1.getText().trim();
        String l2Texto = this.txt_lenguaje2.getText().trim();

        String[] l1Array = l1Texto.split(",");
        String[] l2Array = l2Texto.split(",");

        List<String> concatenados = new ArrayList<>();

        List<String> l1List = new ArrayList<>();
        List<String> l2List = new ArrayList<>();

        for (String elem : l1Array) {
            if (!elem.trim().isEmpty()) {
                l1List.add(elem.trim());
            }
        }
        for (String elem : l2Array) {
            if (!elem.trim().isEmpty()) {
                l2List.add(elem.trim());
            }
        }

        for (String palabra1 : l1List) {
            for (String palabra2 : l2List) {
                concatenados.add(palabra1 + palabra2);
            }
        }

        StringBuilder resultado = new StringBuilder("L1 ¬∑ L2 = { ");
        for (String palabra : concatenados) {
            resultado.append(palabra).append(", ");
        }
        if (!concatenados.isEmpty()) {
            resultado.setLength(resultado.length() - 2); // quitar coma final
        }
        resultado.append(" }");

        this.txt_resultado_lenguajes.setText(resultado.toString());

    }//GEN-LAST:event_btn_concatenacionActionPerformed

    private void btn_potencia_l1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_potencia_l1ActionPerformed
        // TODO add your handling code here:
        String textoL1 = this.txt_lenguaje1.getText().trim();
        String potenciaTexto = this.txt_potencia_l1.getText().trim();

        if (potenciaTexto.isEmpty()) {
            this.txt_resultado_lenguajes.setText("Por favor, ingrese un valor para la potencia.");
            return;
        }

        int n;
        try {
            n = Integer.parseInt(potenciaTexto);
            if (n < 0) {
                this.txt_resultado_lenguajes.setText("La potencia debe ser un n√∫mero entero ‚â• 0.");
                return;
            }
        } catch (NumberFormatException ex) {
            this.txt_resultado_lenguajes.setText("Valor inv√°lido para la potencia.");
            return;
        }

        String[] elementos = textoL1.split(",");
        Set<String> base = new LinkedHashSet<>();

        for (String elem : elementos) {
            if (!elem.trim().isEmpty()) {
                base.add(elem.trim());
            }
        }

        Set<String> resultado = new LinkedHashSet<>();

        if (n == 0) {
            resultado.add("Œª"); // potencia 0 = {Œª}
        } else {
            resultado.addAll(base);

            for (int i = 1; i < n; i++) {
                Set<String> nuevo = new LinkedHashSet<>();
                for (String a : resultado) {
                    for (String b : base) {
                        nuevo.add(a + b);
                    }
                }
                resultado = nuevo;
            }
        }

        StringBuilder sb = new StringBuilder("L1^" + n + " = { ");
        for (String palabra : resultado) {
            sb.append(palabra).append(", ");
        }
        if (!resultado.isEmpty()) {
            sb.setLength(sb.length() - 2); // quitar la √∫ltima coma
        }
        sb.append(" }");

        this.txt_resultado_lenguajes.setText(sb.toString());

    }//GEN-LAST:event_btn_potencia_l1ActionPerformed

    private void btn_inversa_l1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_inversa_l1ActionPerformed
        // TODO add your handling code here:  
        String textoL1 = this.txt_lenguaje1.getText().trim();
        String[] elementos = textoL1.split(",",-1);

        Set<String> inversa = new LinkedHashSet<>();

        for (String palabra : elementos) {
            palabra = palabra.trim();
            if (palabra.equals("") || palabra.equals("Œª")) {
                inversa.add("Œª"); // la inversa de Œª es Œª
            } else {
                StringBuilder invertida = new StringBuilder(palabra).reverse();
                inversa.add(invertida.toString());
            }
        }

        // Construir resultado
        StringBuilder resultado = new StringBuilder("L1 inverso = { ");
        for (String palabra : inversa) {
            resultado.append(palabra).append(", ");
        }
        if (!inversa.isEmpty()) {
            resultado.setLength(resultado.length() - 2); // quitar coma final
        }
        resultado.append(" }");

        this.txt_resultado_lenguajes.setText(resultado.toString());

    }//GEN-LAST:event_btn_inversa_l1ActionPerformed

    private void btn_kleene_l1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_kleene_l1ActionPerformed
        // TODO add your handling code here:
        String textoL1 = this.txt_lenguaje1.getText().trim();
        String limiteTexto = this.txt_kleene_l1.getText().trim();

        if (limiteTexto.isEmpty()) {
            this.txt_resultado_lenguajes.setText("Por favor, ingrese un l√≠mite de potencia (ej. 3).");
            return;
        }

        int n;
        try {
            n = Integer.parseInt(limiteTexto);
            if (n < 0) {
                this.txt_resultado_lenguajes.setText("El l√≠mite debe ser un entero ‚â• 0.");
                return;
            }
        } catch (NumberFormatException ex) {
            this.txt_resultado_lenguajes.setText("Valor inv√°lido para el l√≠mite.");
            return;
        }

        String[] elementos = textoL1.split(",");
        Set<String> base = new LinkedHashSet<>();
        for (String elem : elementos) {
            if (!elem.trim().isEmpty()) {
                base.add(elem.trim());
            }
        }

        Set<String> resultado = new LinkedHashSet<>();
        resultado.add("Œª"); // L‚Å∞ siempre contiene Œª

        Set<String> potenciaActual = new LinkedHashSet<>(base);
        if (n >= 1) {
            resultado.addAll(potenciaActual);
        }

        for (int i = 2; i <= n; i++) {
            Set<String> nuevaPotencia = new LinkedHashSet<>();
            for (String a : potenciaActual) {
                for (String b : base) {
                    nuevaPotencia.add(a + b);
                }
            }
            resultado.addAll(nuevaPotencia);
            potenciaActual = nuevaPotencia;
        }

        StringBuilder sb = new StringBuilder("L* hasta L^" + n + " = { ");
        for (String palabra : resultado) {
            sb.append(palabra).append(", ");
        }
        if (!resultado.isEmpty()) {
            sb.setLength(sb.length() - 2); // quitar la √∫ltima coma
        }
        sb.append(" }");

        this.txt_resultado_lenguajes.setText(sb.toString());

    }//GEN-LAST:event_btn_kleene_l1ActionPerformed

    private void btn_positiva_l1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_positiva_l1ActionPerformed
        // TODO add your handling code here:
        String textoL1 = this.txt_lenguaje1.getText().trim();
        String limiteTexto = this.txt_positiva_l1.getText().trim();

        if (limiteTexto.isEmpty()) {
            this.txt_resultado_lenguajes.setText("Por favor, ingrese un l√≠mite de potencia (ej. 3).");
            return;
        }

        int n;
        try {
            n = Integer.parseInt(limiteTexto);
            if (n <= 0) {
                this.txt_resultado_lenguajes.setText("El l√≠mite debe ser un entero mayor a 0.");
                return;
            }
        } catch (NumberFormatException ex) {
            this.txt_resultado_lenguajes.setText("Valor inv√°lido para el l√≠mite.");
            return;
        }

        String[] elementos = textoL1.split(",");
        Set<String> base = new LinkedHashSet<>();
        for (String elem : elementos) {
            if (!elem.trim().isEmpty()) {
                base.add(elem.trim());
            }
        }

        Set<String> resultado = new LinkedHashSet<>();

        Set<String> potenciaActual = new LinkedHashSet<>(base);
        resultado.addAll(potenciaActual);

        for (int i = 2; i <= n; i++) {
            Set<String> nuevaPotencia = new LinkedHashSet<>();
            for (String a : potenciaActual) {
                for (String b : base) {
                    nuevaPotencia.add(a + b);
                }
            }
            resultado.addAll(nuevaPotencia);
            potenciaActual = nuevaPotencia;
        }

        StringBuilder sb = new StringBuilder("L‚Å∫ hasta L^" + n + " = { ");
        for (String palabra : resultado) {
            sb.append(palabra).append(", ");
        }
        if (!resultado.isEmpty()) {
            sb.setLength(sb.length() - 2); // quitar coma final
        }
        sb.append(" }");

        this.txt_resultado_lenguajes.setText(sb.toString());

    }//GEN-LAST:event_btn_positiva_l1ActionPerformed

    private void btn_agregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_agregarActionPerformed
        // TODO add your handling code here:
        String nueva = txt_nueva_palabra.getText().trim();
        String contenidoActual = txt_lenguaje1.getText().trim();

        if (nueva.isEmpty()) {
            txt_resultado_lenguajes.setText("‚ö†Ô∏è Ingresa una palabra para agregar.");
            return;
        }

        Set<String> lenguaje = new LinkedHashSet<>(Arrays.asList(contenidoActual.split(",", -1)));
        lenguaje.add(nueva);

        txt_lenguaje1.setText(String.join(",", lenguaje));

    }//GEN-LAST:event_btn_agregarActionPerformed

    private void btn_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_eliminarActionPerformed
        // TODO add your handling code here:
        String eliminar = txt_nueva_palabra.getText().trim();
        String contenidoActual = txt_lenguaje1.getText().trim();

        if (eliminar.isEmpty()) {
            txt_resultado_lenguajes.setText("‚ö†Ô∏è Ingresa una palabra para eliminar.");
            return;
        }

        Set<String> lenguaje = new LinkedHashSet<>(Arrays.asList(contenidoActual.split(",", -1)));
        if (lenguaje.remove(eliminar)) {
            txt_lenguaje1.setText(String.join(",", lenguaje));
        } else {
            txt_resultado_lenguajes.setText("‚ö†Ô∏è La palabra no existe en el lenguaje.");
        }

    }//GEN-LAST:event_btn_eliminarActionPerformed

    private void btn_simular_afd2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_simular_afd2ActionPerformed
        // TODO add your handling code here:
        String cadena = txt_simulador_afd2.getText().trim();
        String estado = "A";
        StringBuilder recorrido = new StringBuilder();

        for (int i = 0; i < cadena.length(); i++) {
            char simbolo = cadena.charAt(i);
            recorrido.append("S√≠mbolo le√≠do: ").append(simbolo).append("\n");
            recorrido.append("Estado actual: ").append(estado).append("\n");

            switch (estado) {
                case "A":
                    if (simbolo == 'a') {
                        estado = "B";
                    } else if (simbolo == 'b' || simbolo == 'c') {
                        estado = "A";
                    } else {
                        recorrido.append("‚ùå Transici√≥n inv√°lida desde A con ").append(simbolo).append("\n");
                        txt_resultado_afd2.setText(recorrido.toString());
                        return;
                    }
                    break;

                case "B":
                    if (simbolo == 'a') {
                        estado = "B";
                    } else if (simbolo == 'b') {
                        estado = "C";
                    } else if (simbolo == 'c') {
                        estado = "A";
                    } else {
                        recorrido.append("‚ùå Transici√≥n inv√°lida desde B con ").append(simbolo).append("\n");
                        txt_resultado_afd2.setText(recorrido.toString());
                        return;
                    }
                    break;

                case "C":
                    if (simbolo == 'a') {
                        estado = "B";
                    } else if (simbolo == 'b' || simbolo == 'c') {
                        estado = "A";
                    } else if (simbolo == 'z') {
                        estado = "D";
                    } else {
                        recorrido.append("‚ùå Transici√≥n inv√°lida desde C con ").append(simbolo).append("\n");
                        txt_resultado_afd2.setText(recorrido.toString());
                        return;
                    }
                    break;

                case "D":
                    recorrido.append("‚ö†Ô∏è Estado final alcanzado. No hay m√°s transiciones.\n");
                    break;

                default:
                    recorrido.append("‚ö†Ô∏è Estado desconocido\n");
                    txt_resultado_afd2.setText(recorrido.toString());
                    return;
            }

            recorrido.append("Transici√≥n exitosa ‚Üí Nuevo estado: ").append(estado).append("\n\n");
        }

        recorrido.append("Estado final: ").append(estado).append("\n");

        if (estado.equals("D")) {
            recorrido.append("‚úÖ Cadena ACEPTADA (termina en estado D)");
        } else {
            recorrido.append("‚ùå Cadena RECHAZADA (no termina en D)");
        }

        txt_resultado_afd2.setText(recorrido.toString());
    }//GEN-LAST:event_btn_simular_afd2ActionPerformed

    private void btn_mostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_mostrarActionPerformed
        // TODO add your handling code here:
        String contenidoActual = txt_lenguaje1.getText().trim();
        Set<String> lenguaje = new LinkedHashSet<>(Arrays.asList(contenidoActual.split(",", -1)));

        StringBuilder resultado = new StringBuilder("L1 = { ");
        for (String palabra : lenguaje) {
            if (palabra.isEmpty()) {
                resultado.append("Œª, ");
            } else {
                resultado.append(palabra).append(", ");
            }
        }
        if (!lenguaje.isEmpty()) {
            resultado.setLength(resultado.length() - 2); // quitar √∫ltima coma
        }
        resultado.append(" }");

        txt_resultado_lenguajes.setText(resultado.toString());

    }//GEN-LAST:event_btn_mostrarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frm_cadenasylenguajes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frm_cadenasylenguajes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frm_cadenasylenguajes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frm_cadenasylenguajes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frm_cadenasylenguajes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AFD;
    private javax.swing.JPanel AFND;
    private javax.swing.JPanel Cadenas;
    private javax.swing.JPanel Lenguajes;
    private javax.swing.JButton btn_agregar;
    private javax.swing.JButton btn_concatenacion;
    private javax.swing.JButton btn_concatenar;
    private javax.swing.JButton btn_diferencia;
    private javax.swing.JButton btn_eliminar;
    private javax.swing.JButton btn_interseccion;
    private javax.swing.JButton btn_inversa_l1;
    private javax.swing.JButton btn_kleene_l1;
    private javax.swing.JButton btn_mostrar;
    private javax.swing.JButton btn_positiva_l1;
    private javax.swing.JButton btn_potencia_der;
    private javax.swing.JButton btn_potencia_izq;
    private javax.swing.JButton btn_potencia_l1;
    private javax.swing.JButton btn_procesar;
    private javax.swing.JToggleButton btn_simular_afd;
    private javax.swing.JToggleButton btn_simular_afd2;
    private javax.swing.JButton btn_union;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel lbl_cadenainvertida_der;
    private javax.swing.JLabel lbl_cadenainvertida_izq;
    private javax.swing.JLabel lbl_concatenacion;
    private javax.swing.JLabel lbl_longitud_der;
    private javax.swing.JLabel lbl_longitud_izq;
    private javax.swing.JLabel lenguaje1apertura;
    private javax.swing.JLabel lenguaje1cierre;
    private javax.swing.JLabel lenguaje2apertura;
    private javax.swing.JLabel lenguaje2cierre;
    private javax.swing.JLabel n_cadena_invertida_der;
    private javax.swing.JLabel n_cadena_invertida_izq;
    private javax.swing.JLabel n_concatenacion;
    private javax.swing.JLabel n_longitud_der;
    private javax.swing.JLabel n_longitud_izq;
    private javax.swing.JLabel n_potencia_der;
    private javax.swing.JLabel n_potencia_izq;
    private javax.swing.JTextField txt_cadena_der;
    private javax.swing.JTextField txt_cadena_izq;
    private javax.swing.JTextField txt_kleene_l1;
    private javax.swing.JTextField txt_lenguaje1;
    private javax.swing.JTextField txt_lenguaje2;
    private javax.swing.JTextField txt_nueva_palabra;
    private javax.swing.JTextField txt_positiva_l1;
    private javax.swing.JTextField txt_potencia_der;
    private javax.swing.JTextField txt_potencia_izq;
    private javax.swing.JTextField txt_potencia_l1;
    private javax.swing.JTextArea txt_resultado_afd;
    private javax.swing.JTextArea txt_resultado_afd2;
    private javax.swing.JTextArea txt_resultado_lenguajes;
    private javax.swing.JTextField txt_simulador_afd;
    private javax.swing.JTextField txt_simulador_afd2;
    // End of variables declaration//GEN-END:variables
}
